#+TITLE: Emacs config
#+AUTHOR: Juan
#+LANGUAGE: en
#+OPTIONS: num:nil

* Quality of life
** Enable UTF-8 and remove backups
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq locale-coding-system 'utf-8)

  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
#+END_SRC
** Scaling
#+BEGIN_SRC emacs-lisp
  ;; zoom in/out like we do everywhere else.
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC
** Enable line numbers
Emacs breaks certain modes when it has line-numbers-mode enabled, (like docview or ansi-term) so I utilize the approach of only enabling it on some major modes rather than globally
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
  ;;(global-display-fill-column-indicator-mode 1)
  (setq-default display-line-numbers-type 'relative
  display-line-numbers-current-absolute t
  display-line-numbers-width 4
  display-line-numbers-widen t)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+END_SRC
** Show parent parentheses
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Disable the default startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Disable most gui elements
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Enable copypasting outside of Emacs
#+BEGIN_SRC emacs-lisp
  (setq select-enable-clipboard t)
#+END_SRC
** Move automatic creation of backup files
#+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
    ;; disk space is cheap
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.config/emacs/auto-save-list/" t)))
#+END_SRC

** Enable conservative scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Disable ring-bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq-default standard-indent 2)
  (setq c-basic-offset tab-width)
  (setq-default electric-indent-inhibit t)
  ;; Use spaces instead of tabs
  (setq-default indent-tabs-mode nil)
  (setq backward-delete-char-untabify-method 'nil)
#+END_SRC
  ** Enable bracket pair-matching
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
#+END_SRC
** Transform yes-or-no questions into y-or-n
#+BEGIN_SRC emacs-lisp
  (if (version<= emacs-version "28.0")
      (defalias 'yes-or-no-p 'y-or-n-p)
    (setq use-short-answers 1))
#+END_SRC
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Setup Font
#+BEGIN_SRC emacs-lisp
;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
;;       in Emacs and init.el will be generated automatically!

;; You will most likely need to adjust this font size for your system!
(defvar efs/default-font-size 180)
(defvar efs/default-variable-font-size 180)

;; Make frame transparency overridable
(defvar efs/frame-transparency '(90 . 90))

(set-face-attribute 'default nil :font "Fira Code Retina" :height efs/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height efs/default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)
#+END_SRC

** Setup Evil
#+BEGIN_SRC emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :straight t
    :after evil
    :config
    (general-create-definer efs/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (efs/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "b b"   '(ibuffer :which-key "Ibuffer")
      "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
      "b k"   '(kill-current-buffer :which-key "Kill current buffer")
      "b n"   '(next-buffer :which-key "Next buffer")
      "b p"   '(previous-buffer :which-key "Previous buffer")
      "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
      "b K"   '(kill-buffer :which-key "Kill buffer")
      "b r"   '(projectile-ripgrep :which-key "Ripgrep into project")
      "b t"   '(vterm :which-key "vterm")
      "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))

  (use-package evil
    :straight t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :straight t
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

** Initialize =all-the-icons=
*** Description
Bring nice icons to emacs
*** Code
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :straight t
  :config
    ;; (all-the-icons-install-fonts)

)
#+END_SRC

** Initialize =all-the-icons-completion=
*** Code
#+begin_src emacs-lisp
      (use-package all-the-icons-completion
        :straight t
        :config
        (all-the-icons-completion-mode))
#+end_src
** Themes
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :straight t
  :init (load-theme 'doom-palenight t))
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)

(use-package doom-modeline
  :straight t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+END_SRC

** Which key 
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :straight t
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))
#+END_SRC

** Org-mode
*** Description
One of the main selling points of Emacs! Org Mode!
**** Code
#+BEGIN_SRC emacs-lisp
        (use-package org-indent
          :straight nil
          :diminish org-indent-mode)

        (use-package htmlize
          :straight t)

      (use-package org-bullets
        :straight t
        :hook (org-mode . org-bullets-mode))

    (defun echo-area-tooltips ()
      "Show tooltips in the echo area automatically for current buffer."
      (setq-local help-at-pt-display-when-idle t
                  help-at-pt-timer-delay 0)
      (help-at-pt-cancel-timer)
      (help-at-pt-set-timer))

    (add-hook 'org-mode-hook #'echo-area-tooltips)
  ;; Sets LaTeX preview size
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

  (use-package org-beautify-theme
    :straight t)
  (add-hook 'org-mode-hook #'(lambda () (load-theme 'org-beautify t)))

  ;; (add-hook 'org-mode-hook #'(lambda () (load-theme 'org-beautify t)))

  (use-package org-present
    :straight t
    :config
    (add-hook 'org-present-mode-hook
         (lambda ()
           (org-present-big)
           (org-display-inline-images)
           (org-present-hide-cursor)
           (org-present-read-only)
           (hide-mode-line-mode +1)))

    (add-hook 'org-present-mode-quit-hook
       #'(lambda ()
         (org-present-small)
         (org-remove-inline-images)
         (org-present-show-cursor)
         (org-present-read-write)
         (hide-mode-line-mode))))  
#+END_SRC

** Ivy and counsel 
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :straight t
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :straight t
  :after ivy
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :straight t
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))
#+END_SRC
** Dired
#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
#+end_src

* Packages
** Initialize =async=
*** Description
Utilize asynchronous processes whenever possible
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package async
    :straight t
    :init
    (dired-async-mode 1))
#+END_SRC

** Initialize =projectile=
*** Description
Projectile is a project interaction library for Emacs.
Its goal is to provide a nice set of features
operating on a project level without introducing
external dependencies (when feasible).
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package projectile
   :straight t
   :config
   (projectile-mode +1)
   (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC

** Initialize =dashboard=
*** Description
The frontend of Witchmacs; without this there'd be no Marisa in your Emacs startup screen
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :straight t
    :config
    (dashboard-setup-startup-hook)
        (setq dashboard-set-heading-icons t)
        (setq dashboard-set-file-icons t)
        (setq dashboard-projects-backend 'projectile)
        (setq dashboard-items '((projects . 5)
                                (recents . 5)
                                (bookmarks . 5)
                                (agenda . 5)))
    (setq dashboard-banner-logo-title "E M A C S - The worst text editor!")
    (setq dashboard-startup-banner "~/.config/emacs/hitagi.png")
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-set-init-info t)
    ;; (setq dashboard-init-info (format "%d packages loaded in %s"
    ;;                                   (length package-activated-list) (emacs-init-time)))
    (setq dashboard-set-footer t)
    (setq dashboard-set-navigator t))
#+END_SRC

Make Dashboard open as the default instead of scratch
#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC
** Initialize =rainbow-mode=
*** Code
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :straight t)
;; To enable in all programming-related modes (Emacs 24+):
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC
** Initialize =rainbow-delimeters=
*** Code
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :straight t)
#+END_SRC


** Plant-UML

#+BEGIN_SRC emacs-lisp

(use-package plantuml-mode
  :straight t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-plantuml-jar-path (expand-file-name "/home/vym/.java/plantuml.jar"))
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
#+END_SRC

* programming-related
** LSP
#+BEGIN_SRC emacs-lisp
  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :straight t
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
  (use-package lsp-ui
    :straight t
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

(use-package typescript-mode
  :straight t
  :mode "\\.js\\'"
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
 :straight t
 :config
 (global-company-mode))
#+END_SRC

** Yasnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :straight t
  :diminish yas
  :config
  (yas-global-mode 1)
)
;; Bundled snippets
(use-package yasnippet-snippets
  :straight t
  :config
  (yas-global-mode 1)
)
#+END_SRC

** Vterm
#+BEGIN_SRC emacs-lisp
(use-package vterm
  :straight t
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
  ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
  (setq vterm-max-scrollback 10000))
#+END_SRC

** PDF Tools 
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
   :straight t
   :config
       (pdf-tools-install)
       (setq-default pdf-view-display-size 'fit-page)
   :bind (:map pdf-view-mode-map
         ("\\" . hydra-pdftools/body)
         ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
         ("g"  . pdf-view-first-page)
         ("G"  . pdf-view-last-page)
         ("l"  . image-forward-hscroll)
         ("h"  . image-backward-hscroll)
         ("j"  . pdf-view-next-page)
         ("k"  . pdf-view-previous-page)
         ("e"  . pdf-view-goto-page)
         ("u"  . pdf-view-revert-buffer)
         ("al" . pdf-annot-list-annotations)
         ("ad" . pdf-annot-delete)
         ("aa" . pdf-annot-attachment-dired)
         ("am" . pdf-annot-add-markup-annotation)
         ("at" . pdf-annot-add-text-annotation)
         ("y"  . pdf-view-kill-ring-save)
         ("i"  . pdf-misc-display-metadata)
         ("s"  . pdf-occur)
         ("b"  . pdf-view-set-slice-from-bounding-box)
         ("r"  . pdf-view-reset-slice)))

   (use-package org-pdfview
       :straight t
       :config 
               (add-to-list 'org-file-apps
               '("\\.pdf\\'" . (lambda (file link)
               (org-pdfview-open link)))))

#+END_SRC

** Pretty org-bullets 
#+BEGIN_SRC emacs-lisp

(use-package org-bullets
  :straight t
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+END_SRC
